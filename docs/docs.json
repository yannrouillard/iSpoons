[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [
      {
        "def": "AutoMaximize.exclusions",
        "desc": "List of application names for which the AutoMaximize mode should not be applied.",
        "doc": "List of application names for which the AutoMaximize mode should not be applied.\n\nNotes:\n * Default value: `{}`",
        "file": "Source/AutoMaximize.spoon/init.lua",
        "lineno": "19",
        "name": "exclusions",
        "notes": [
          " * Default value: `{}`"
        ],
        "signature": "AutoMaximize.exclusions",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Automatically maximize new windows",
    "doc": "Automatically maximize new windows\n",
    "items": [
      {
        "def": "AutoMaximize.exclusions",
        "desc": "List of application names for which the AutoMaximize mode should not be applied.",
        "doc": "List of application names for which the AutoMaximize mode should not be applied.\n\nNotes:\n * Default value: `{}`",
        "file": "Source/AutoMaximize.spoon/init.lua",
        "lineno": "19",
        "name": "exclusions",
        "notes": [
          " * Default value: `{}`"
        ],
        "signature": "AutoMaximize.exclusions",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "AutoMaximize",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "Automatically switch Input Source depending on the current application running",
    "doc": "Automatically switch Input Source depending on the current application running\n",
    "items": [],
    "name": "InputSourceAutoSwitch",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Iterm2:closeMatchinTabs(workingDirectoryPrefix)",
        "desc": "Close all tabs whose working directory starts with the given prefix",
        "doc": "Close all tabs whose working directory starts with the given prefix\n\nParameters:\n * the absolute path to a directory prefix",
        "examples": [],
        "file": "Source/Iterm2.spoon/init.lua",
        "lineno": "70",
        "name": "closeMatchinTabs",
        "notes": [],
        "parameters": [
          " * the absolute path to a directory prefix"
        ],
        "returns": [],
        "signature": "Iterm2:closeMatchinTabs(workingDirectoryPrefix)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Iterm2:getActiveTab(mapping)",
        "desc": "Return information about the currently active tab in iTerm2",
        "doc": "Return information about the currently active tab in iTerm2\n\nParameters:\n * None\n\nReturns:\n * A Table containing the following information about the tab\n   - working_directory: The working directory of the tab\n   - title: the title of the tab\n   - id: the id of the tab  \n    ",
        "examples": [],
        "file": "Source/Iterm2.spoon/init.lua",
        "lineno": "53",
        "name": "getActiveTab",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * A Table containing the following information about the tab",
          "   - working_directory: The working directory of the tab",
          "   - title: the title of the tab",
          "   - id: the id of the tab  ",
          "    "
        ],
        "signature": "Iterm2:getActiveTab(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Iterm2:openOrActivateTab(workingDirectory)",
        "desc": "Open a new tab or activate an existing one with the given working directory",
        "doc": "Open a new tab or activate an existing one with the given working directory\n\nParameters:\n * the absolute path to a directory",
        "examples": [],
        "file": "Source/Iterm2.spoon/init.lua",
        "lineno": "82",
        "name": "openOrActivateTab",
        "notes": [],
        "parameters": [
          " * the absolute path to a directory"
        ],
        "returns": [],
        "signature": "Iterm2:openOrActivateTab(workingDirectory)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Provides helper functions to interact with iTerm2 through its AppleScript API.",
    "doc": "Provides helper functions to interact with iTerm2 through its AppleScript API.\n\nIt requires the installation of the AutoLaunch script hammerspoon_interface.py\nin iTerm2. This can be done by running the following command:\n```\n  ln -s ~/.hammerspoon/Spoons/Iterm2.spoon/hammerspoon_interface.py \\\n        ~/\"Application Support/iTerm2/Scripts/AutoLaunch/hammerspoon_interface.py\"\n``` ",
    "items": [
      {
        "def": "Iterm2:closeMatchinTabs(workingDirectoryPrefix)",
        "desc": "Close all tabs whose working directory starts with the given prefix",
        "doc": "Close all tabs whose working directory starts with the given prefix\n\nParameters:\n * the absolute path to a directory prefix",
        "examples": [],
        "file": "Source/Iterm2.spoon/init.lua",
        "lineno": "70",
        "name": "closeMatchinTabs",
        "notes": [],
        "parameters": [
          " * the absolute path to a directory prefix"
        ],
        "returns": [],
        "signature": "Iterm2:closeMatchinTabs(workingDirectoryPrefix)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Iterm2:getActiveTab(mapping)",
        "desc": "Return information about the currently active tab in iTerm2",
        "doc": "Return information about the currently active tab in iTerm2\n\nParameters:\n * None\n\nReturns:\n * A Table containing the following information about the tab\n   - working_directory: The working directory of the tab\n   - title: the title of the tab\n   - id: the id of the tab  \n    ",
        "examples": [],
        "file": "Source/Iterm2.spoon/init.lua",
        "lineno": "53",
        "name": "getActiveTab",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * A Table containing the following information about the tab",
          "   - working_directory: The working directory of the tab",
          "   - title: the title of the tab",
          "   - id: the id of the tab  ",
          "    "
        ],
        "signature": "Iterm2:getActiveTab(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Iterm2:openOrActivateTab(workingDirectory)",
        "desc": "Open a new tab or activate an existing one with the given working directory",
        "doc": "Open a new tab or activate an existing one with the given working directory\n\nParameters:\n * the absolute path to a directory",
        "examples": [],
        "file": "Source/Iterm2.spoon/init.lua",
        "lineno": "82",
        "name": "openOrActivateTab",
        "notes": [],
        "parameters": [
          " * the absolute path to a directory"
        ],
        "returns": [],
        "signature": "Iterm2:openOrActivateTab(workingDirectory)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Iterm2",
    "stripped_doc": "\nIt requires the installation of the AutoLaunch script hammerspoon_interface.py\nin iTerm2. This can be done by running the following command:\n```\n  ln -s ~/.hammerspoon/Spoons/Iterm2.spoon/hammerspoon_interface.py \\\n        ~/\"Application Support/iTerm2/Scripts/AutoLaunch/hammerspoon_interface.py\"\n``` ",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MoveWindowsOnScreens:bindHotkeys(mapping) -> self",
        "desc": "Binds hotkeys for MoveWindowsOnScreens",
        "doc": "Binds hotkeys for MoveWindowsOnScreens\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for each available operation\n\nReturns:\n * The MoveWindowsOnScreens object",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "156",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for each available operation"
        ],
        "returns": [
          " * The MoveWindowsOnScreens object"
        ],
        "signature": "MoveWindowsOnScreens:bindHotkeys(mapping) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MoveWindowsOnScreens:focusWindowLeft()",
        "desc": "Focus the window which is on the left scren",
        "doc": "Focus the window which is on the left scren\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "94",
        "name": "focusWindowLeft",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MoveWindowsOnScreens:focusWindowLeft()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MoveWindowsOnScreens:focusWindowRight()",
        "desc": "Focus the window which is on the right scren",
        "doc": "Focus the window which is on the right scren\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "105",
        "name": "focusWindowRight",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MoveWindowsOnScreens:focusWindowRight()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MoveWindowsOnScreens:moveWindowLeft()",
        "desc": "Move the current window on the left screen and maximize it",
        "doc": "Move the current window on the left screen and maximize it\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "70",
        "name": "moveWindowLeft",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MoveWindowsOnScreens:moveWindowLeft()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MoveWindowsOnScreens:moveWindowRight()",
        "desc": "Move the current window on the right screen and maximize it",
        "doc": "Move the current window on the right screen and maximize it\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "82",
        "name": "moveWindowRight",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MoveWindowsOnScreens:moveWindowRight()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MoveWindowsOnScreens:placeSelectedWindowOnTheRight()",
        "desc": "Open a chooser to select a window to place on the right screen and maximize it",
        "doc": "Open a chooser to select a window to place on the right screen and maximize it\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "143",
        "name": "placeSelectedWindowOnTheRight",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MoveWindowsOnScreens:placeSelectedWindowOnTheRight()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MoveWindowsOnScreens:switchWindowLeftAndRight()",
        "desc": "Switch the screen of the current window and the window of the left/right screen",
        "doc": "Switch the screen of the current window and the window of the left/right screen\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "116",
        "name": "switchWindowLeftAndRight",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MoveWindowsOnScreens:switchWindowLeftAndRight()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Provide easy window functions and hotkeys to move window between screens",
    "doc": "Provide easy window functions and hotkeys to move window between screens\n",
    "items": [
      {
        "def": "MoveWindowsOnScreens:bindHotkeys(mapping) -> self",
        "desc": "Binds hotkeys for MoveWindowsOnScreens",
        "doc": "Binds hotkeys for MoveWindowsOnScreens\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for each available operation\n\nReturns:\n * The MoveWindowsOnScreens object",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "156",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for each available operation"
        ],
        "returns": [
          " * The MoveWindowsOnScreens object"
        ],
        "signature": "MoveWindowsOnScreens:bindHotkeys(mapping) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MoveWindowsOnScreens:focusWindowLeft()",
        "desc": "Focus the window which is on the left scren",
        "doc": "Focus the window which is on the left scren\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "94",
        "name": "focusWindowLeft",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MoveWindowsOnScreens:focusWindowLeft()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MoveWindowsOnScreens:focusWindowRight()",
        "desc": "Focus the window which is on the right scren",
        "doc": "Focus the window which is on the right scren\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "105",
        "name": "focusWindowRight",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MoveWindowsOnScreens:focusWindowRight()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MoveWindowsOnScreens:moveWindowLeft()",
        "desc": "Move the current window on the left screen and maximize it",
        "doc": "Move the current window on the left screen and maximize it\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "70",
        "name": "moveWindowLeft",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MoveWindowsOnScreens:moveWindowLeft()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MoveWindowsOnScreens:moveWindowRight()",
        "desc": "Move the current window on the right screen and maximize it",
        "doc": "Move the current window on the right screen and maximize it\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "82",
        "name": "moveWindowRight",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MoveWindowsOnScreens:moveWindowRight()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MoveWindowsOnScreens:placeSelectedWindowOnTheRight()",
        "desc": "Open a chooser to select a window to place on the right screen and maximize it",
        "doc": "Open a chooser to select a window to place on the right screen and maximize it\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "143",
        "name": "placeSelectedWindowOnTheRight",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MoveWindowsOnScreens:placeSelectedWindowOnTheRight()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MoveWindowsOnScreens:switchWindowLeftAndRight()",
        "desc": "Switch the screen of the current window and the window of the left/right screen",
        "doc": "Switch the screen of the current window and the window of the left/right screen\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/MoveWindowsOnScreens.spoon/init.lua",
        "lineno": "116",
        "name": "switchWindowLeftAndRight",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "MoveWindowsOnScreens:switchWindowLeftAndRight()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "MoveWindowsOnScreens",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "SmartAppSwitcher:bindHotkeys(mapping)",
        "desc": "Binds hotkey to each application",
        "doc": "Binds hotkey to each application\n\nParameters:\n * mapping - A table containing single characters with their associated app\n",
        "examples": [],
        "file": "Source/SmartAppSwitcher.spoon/init.lua",
        "lineno": "150",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing single characters with their associated app"
        ],
        "returns": [],
        "signature": "SmartAppSwitcher:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Easily switch between your most used applications with one key assigned to each app,",
    "doc": "Easily switch between your most used applications with one key assigned to each app,\nand automatically activate the most relevant window/tab in the target application\nwhen possible.\n\nFor instance, when switching from iTerm2 to Visual Studio Code while on a source\ncode repository, SmartAppSwitcher will automatically activate or open a Visual Studio\nCode window on the source code repository.\n\nNotes:\n * The window/tab auto-select feature requires some helper spoons for eligible applications\n   (currently only iTerm2 and Visual Studio Code are supported)\n\nExamples configuration:\n```\nhs.loadSpoon(\"SmartAppSwitcher\")\nspoon.SmartAppSwitcher.modifier = {\"cmd\", \"alt\"}\nspoon.SmartAppSwitcher.helperSpoons = {\n  [\"iTerm\"] = spoon.Iterm2,\n  [\"Visual Studio Code\"] = spoon.VsCode\n}\nspoon.SmartAppSwitcher.bindHotkeys({\n  c = \"Visual Studio Code\",\n  o = \"Obsidian\",\n  f = \"Firefox\",\n  k = \"Slack\",\n  s = \"Spotify\",\n  i = \"iTerm\"\n})\n```\n",
    "items": [
      {
        "def": "SmartAppSwitcher:bindHotkeys(mapping)",
        "desc": "Binds hotkey to each application",
        "doc": "Binds hotkey to each application\n\nParameters:\n * mapping - A table containing single characters with their associated app\n",
        "examples": [],
        "file": "Source/SmartAppSwitcher.spoon/init.lua",
        "lineno": "150",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing single characters with their associated app"
        ],
        "returns": [],
        "signature": "SmartAppSwitcher:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "SmartAppSwitcher",
    "stripped_doc": "and automatically activate the most relevant window/tab in the target application\nwhen possible.\n\nFor instance, when switching from iTerm2 to Visual Studio Code while on a source\ncode repository, SmartAppSwitcher will automatically activate or open a Visual Studio\nCode window on the source code repository.\n\nNotes:\n * The window/tab auto-select feature requires some helper spoons for eligible applications\n   (currently only iTerm2 and Visual Studio Code are supported)\n\nExamples configuration:\n```\nhs.loadSpoon(\"SmartAppSwitcher\")\nspoon.SmartAppSwitcher.modifier = {\"cmd\", \"alt\"}\nspoon.SmartAppSwitcher.helperSpoons = {\n  [\"iTerm\"] = spoon.Iterm2,\n  [\"Visual Studio Code\"] = spoon.VsCode\n}\nspoon.SmartAppSwitcher.bindHotkeys({\n  c = \"Visual Studio Code\",\n  o = \"Obsidian\",\n  f = \"Firefox\",\n  k = \"Slack\",\n  s = \"Spotify\",\n  i = \"iTerm\"\n})\n```\n",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Toggler:bindHotkeys(mapping) -> self",
        "desc": "Binds hotkeys to Toggler methods",
        "doc": "Binds hotkeys to Toggler methods\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for each available operation\n\nReturns:\n * The Toggler object",
        "examples": [],
        "file": "Source/Toggler.spoon/init.lua",
        "lineno": "56",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for each available operation"
        ],
        "returns": [
          " * The Toggler object"
        ],
        "signature": "Toggler:bindHotkeys(mapping) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Toggler:toggleSidecar()",
        "desc": "Enable/disable Sidecar (iPad as second display)",
        "doc": "Enable/disable Sidecar (iPad as second display)\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/Toggler.spoon/init.lua",
        "lineno": "38",
        "name": "toggleSidecar",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Toggler:toggleSidecar()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Export various toggle methods",
    "doc": "Export various toggle methods\n",
    "items": [
      {
        "def": "Toggler:bindHotkeys(mapping) -> self",
        "desc": "Binds hotkeys to Toggler methods",
        "doc": "Binds hotkeys to Toggler methods\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for each available operation\n\nReturns:\n * The Toggler object",
        "examples": [],
        "file": "Source/Toggler.spoon/init.lua",
        "lineno": "56",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for each available operation"
        ],
        "returns": [
          " * The Toggler object"
        ],
        "signature": "Toggler:bindHotkeys(mapping) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Toggler:toggleSidecar()",
        "desc": "Enable/disable Sidecar (iPad as second display)",
        "doc": "Enable/disable Sidecar (iPad as second display)\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/Toggler.spoon/init.lua",
        "lineno": "38",
        "name": "toggleSidecar",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "Toggler:toggleSidecar()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Toggler",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [],
    "Variable": [],
    "desc": "Automatically stop/start music and increase/decrease volume when entering/leaving a video conference",
    "doc": "Automatically stop/start music and increase/decrease volume when entering/leaving a video conference\n",
    "items": [],
    "name": "VideoConfAutoSound",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "VsCode.closeMatchingWindows(workingDirectoryPrefix)",
        "desc": "Closes all Visual Studio Code windows whose workspace folder matches the specified prefix.",
        "doc": "Closes all Visual Studio Code windows whose workspace folder matches the specified prefix.\n\nParameters:\n * workingDirectoryPrefix - A string containing the prefix to match against the workspace folder of each window.\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/VsCode.spoon/init.lua",
        "lineno": "100",
        "name": "closeMatchingWindows",
        "notes": [],
        "parameters": [
          " * workingDirectoryPrefix - A string containing the prefix to match against the workspace folder of each window."
        ],
        "returns": [
          " * None"
        ],
        "signature": "VsCode.closeMatchingWindows(workingDirectoryPrefix)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "VsCode.getWindowInfo(window)",
        "desc": "Extracts information about the specified Visual Studio Code window.",
        "doc": "Extracts information about the specified Visual Studio Code window.\n\nParameters:\n * window - The window to extract information from.\n\nReturns:\n * A table containing the following information about the window:\n   - window: The window object\n   - workspaceFolder: the absolute path to the workspace folder of the window\n   - filename: the name of the file opened in the window (or nil if no file is opened)",
        "examples": [],
        "file": "Source/VsCode.spoon/init.lua",
        "lineno": "61",
        "name": "getWindowInfo",
        "notes": [],
        "parameters": [
          " * window - The window to extract information from."
        ],
        "returns": [
          " * A table containing the following information about the window:",
          "   - window: The window object",
          "   - workspaceFolder: the absolute path to the workspace folder of the window",
          "   - filename: the name of the file opened in the window (or nil if no file is opened)"
        ],
        "signature": "VsCode.getWindowInfo(window)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "VsCode.listWindows()",
        "desc": "Returns a list of all Visual Code windows with some additional information",
        "doc": "Returns a list of all Visual Code windows with some additional information\n\nParameters:\n * None\n\nReturns:\n * A table containing the list of Visual Studio Code window with the following \n   information about all Code windows:\n   - window: The window object\n   - workspaceFolder: the absolute path to the workspace folder of the window\n   - filename: the name of the file opened in the window (or nil if no file is opened)",
        "examples": [],
        "file": "Source/VsCode.spoon/init.lua",
        "lineno": "77",
        "name": "listWindows",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * A table containing the list of Visual Studio Code window with the following ",
          "   information about all Code windows:",
          "   - window: The window object",
          "   - workspaceFolder: the absolute path to the workspace folder of the window",
          "   - filename: the name of the file opened in the window (or nil if no file is opened)"
        ],
        "signature": "VsCode.listWindows()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Provides helper functions to interact with iTerm2 through its AppleScript API.",
    "doc": "Provides helper functions to interact with iTerm2 through its AppleScript API.\n",
    "items": [
      {
        "def": "VsCode.closeMatchingWindows(workingDirectoryPrefix)",
        "desc": "Closes all Visual Studio Code windows whose workspace folder matches the specified prefix.",
        "doc": "Closes all Visual Studio Code windows whose workspace folder matches the specified prefix.\n\nParameters:\n * workingDirectoryPrefix - A string containing the prefix to match against the workspace folder of each window.\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/VsCode.spoon/init.lua",
        "lineno": "100",
        "name": "closeMatchingWindows",
        "notes": [],
        "parameters": [
          " * workingDirectoryPrefix - A string containing the prefix to match against the workspace folder of each window."
        ],
        "returns": [
          " * None"
        ],
        "signature": "VsCode.closeMatchingWindows(workingDirectoryPrefix)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "VsCode.getWindowInfo(window)",
        "desc": "Extracts information about the specified Visual Studio Code window.",
        "doc": "Extracts information about the specified Visual Studio Code window.\n\nParameters:\n * window - The window to extract information from.\n\nReturns:\n * A table containing the following information about the window:\n   - window: The window object\n   - workspaceFolder: the absolute path to the workspace folder of the window\n   - filename: the name of the file opened in the window (or nil if no file is opened)",
        "examples": [],
        "file": "Source/VsCode.spoon/init.lua",
        "lineno": "61",
        "name": "getWindowInfo",
        "notes": [],
        "parameters": [
          " * window - The window to extract information from."
        ],
        "returns": [
          " * A table containing the following information about the window:",
          "   - window: The window object",
          "   - workspaceFolder: the absolute path to the workspace folder of the window",
          "   - filename: the name of the file opened in the window (or nil if no file is opened)"
        ],
        "signature": "VsCode.getWindowInfo(window)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "VsCode.listWindows()",
        "desc": "Returns a list of all Visual Code windows with some additional information",
        "doc": "Returns a list of all Visual Code windows with some additional information\n\nParameters:\n * None\n\nReturns:\n * A table containing the list of Visual Studio Code window with the following \n   information about all Code windows:\n   - window: The window object\n   - workspaceFolder: the absolute path to the workspace folder of the window\n   - filename: the name of the file opened in the window (or nil if no file is opened)",
        "examples": [],
        "file": "Source/VsCode.spoon/init.lua",
        "lineno": "77",
        "name": "listWindows",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * A table containing the list of Visual Studio Code window with the following ",
          "   information about all Code windows:",
          "   - window: The window object",
          "   - workspaceFolder: the absolute path to the workspace folder of the window",
          "   - filename: the name of the file opened in the window (or nil if no file is opened)"
        ],
        "signature": "VsCode.listWindows()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "VsCode",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "WorkOnOff:bindHotkeys(mapping) -> self",
        "desc": "Binds hotkeys to WorkOnOff methods",
        "doc": "Binds hotkeys to WorkOnOff methods\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for each available operation\n\nReturns:\n * The WorkOnOff object",
        "examples": [],
        "file": "Source/WorkOnOff.spoon/init.lua",
        "lineno": "104",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for each available operation"
        ],
        "returns": [
          " * The WorkOnOff object"
        ],
        "signature": "WorkOnOff:bindHotkeys(mapping) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WorkOnOff:workOff()",
        "desc": "Stop everything (applications, spoons...) that are work-related",
        "doc": "Stop everything (applications, spoons...) that are work-related\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/WorkOnOff.spoon/init.lua",
        "lineno": "77",
        "name": "workOff",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WorkOnOff:workOff()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WorkOnOff:workOn()",
        "desc": "Start everything (applications, spoons, urls...) that are required to start the work day",
        "doc": "Start everything (applications, spoons, urls...) that are required to start the work day\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/WorkOnOff.spoon/init.lua",
        "lineno": "50",
        "name": "workOn",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WorkOnOff:workOn()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "Easily start/stop applications, open URLs and start/stop Spoons when you start/stop working",
    "doc": "Easily start/stop applications, open URLs and start/stop Spoons when you start/stop working\n",
    "items": [
      {
        "def": "WorkOnOff:bindHotkeys(mapping) -> self",
        "desc": "Binds hotkeys to WorkOnOff methods",
        "doc": "Binds hotkeys to WorkOnOff methods\n\nParameters:\n * mapping - A table containing hotkey modifier/key details for each available operation\n\nReturns:\n * The WorkOnOff object",
        "examples": [],
        "file": "Source/WorkOnOff.spoon/init.lua",
        "lineno": "104",
        "name": "bindHotkeys",
        "notes": [],
        "parameters": [
          " * mapping - A table containing hotkey modifier/key details for each available operation"
        ],
        "returns": [
          " * The WorkOnOff object"
        ],
        "signature": "WorkOnOff:bindHotkeys(mapping) -> self",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WorkOnOff:workOff()",
        "desc": "Stop everything (applications, spoons...) that are work-related",
        "doc": "Stop everything (applications, spoons...) that are work-related\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/WorkOnOff.spoon/init.lua",
        "lineno": "77",
        "name": "workOff",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WorkOnOff:workOff()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WorkOnOff:workOn()",
        "desc": "Start everything (applications, spoons, urls...) that are required to start the work day",
        "doc": "Start everything (applications, spoons, urls...) that are required to start the work day\n\nParameters:\n * None\n",
        "examples": [],
        "file": "Source/WorkOnOff.spoon/init.lua",
        "lineno": "50",
        "name": "workOn",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [],
        "signature": "WorkOnOff:workOn()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "WorkOnOff",
    "stripped_doc": "",
    "submodules": [],
    "type": "Module"
  }
]